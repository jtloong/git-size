#!/bin/bash

usage(){
  echo "Usage (v1.0.5):"
  echo "  git size --csv --csv-headers --kilobytes DIRNAME"
  echo "  DIRNAME is optional - defaults to current directory"
  echo "  --csv or -c: output as csv format"
  echo "  --csv-headers or -H: header row for CSV output"
  echo "  --kilobytes or -k: kilobyte blocks instead of human units (always set for CSV output)"
  echo ""
  echo "  Want recursive? How about:"
  echo "  find . -type d -name .git -exec git size --csv {} \;"
  echo "  (don't worry about a '/.git' suffix, that gets trimmed off, this works as you'd want)"
  exit 1
}

function kbytes_for_humans {
    local -i kbytes=$1;
    if [[ $kbytes -lt 1024 ]]; then
       echo "${kbytes}K"
    elif [[ $kbytes -lt 1048576 ]]; then
        megs=$(echo "scale=1; $kbytes / 1024" | bc | sed 's/\.0//')
        echo "${megs}M"
    else
       gigs=$(echo "scale=1; $kbytes / (1024^2)" | bc | sed 's/\.0//')
       echo "${gigs}G"
    fi
    }

function sum_files {
    ssize="0"
    while read -r line; do
        if [[ !  -z  "$line"  ]]; then
            fsize=$(du -k -d0 "$line" | tail -1 | cut -f 1)
            ssize=$((ssize + fsize))
        fi
    done <<< "$1"
    echo $ssize
}


directory=$(pwd)
csv_format="0"
fmt="-h"
csv_hdr="0"
leftOver=""
until [ -z $1 ]
    do
    if [ "$1" == "--csv" ] || [ "$1" == "-c" ]; then
        csv_format="1"
        fmt="-k"
        shift
    elif [ "$1" == "--kilobytes" ] || [ "$1" == "-k" ]; then
      fmt="-k"
      shift
    elif [ "$1" == "--csv-headers" ] || [ "$1" == "-H" ]; then
      csv_hdr="1"
      shift
    elif [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
        usage
    else
        directory=$(echo "$1" | sed 's/\.git$//')
        if [ ! -d "$directory" ]; then
            echo "Error, directory $directory not found"
            usage
        fi
        directory=$(realpath "$directory")
        shift
        if [ "$#" -gt "0" ]; then
            leftOver="${leftOver} $@"
            break
        fi
    fi
done

if [ ! -z "${leftOver// }" ]; then
    echo "Unrecognized params/options: $leftOver"
    usage
fi

cd "$directory"

# Can only go ahead if a git repo
not_a_git_repo=$(git status . 2>&1 | grep "Not a git repository" | wc -l)
if [ "$not_a_git_repo" -gt "0" ]; then
  echo "Directory $directory isn't a Git repository/clone, can't run 'git size' there"
  exit 1
fi

total_size=$(du $fmt -d0 . | cut -f 1 | sed 's/\.0//')

size_of_ignored="0"
if [ -f .gitignore ]; then
  # the perl one-liner removes files from stdin that don't exist. Should be a unix command 'pipefilesexist'
  ignored=$(find . -type f | sed 's/.*/"&"/' | git check-ignore --stdin | perl -ne 'chomp(); if (-e $_) {print "$_\n"}' | sed 's#\./##' | sed 's/ /\ /')
  size_of_ignored=$(sum_files "$ignored")
  if [ "$fmt" == "-h" ]; then
    size_of_ignored=$(kbytes_for_humans $size_of_ignored)
  fi
fi

checkout=$(git ls-files | perl -ne 'chomp(); if (-e $_) {print "$_\n"}')
size_of_checkout=$(sum_files "$checkout")
if [ "$fmt" == "-h" ]; then
  size_of_checkout=$(kbytes_for_humans $size_of_checkout)
fi

size_of_dot_git_folder=$(du $fmt -d0 .git | tail -1 | cut -f 1 | sed 's/\.0//')

if [ "$csv_format" -eq "0" ]; then
  if [ $fmt == "-k" ]; then
    format=" (KB)"
  else
    format=""
  fi
  echo "$directory: git size${format}:"
  echo "  .git folder: $size_of_dot_git_folder"
  echo "  checkout: $size_of_checkout"
  echo "  ignored: $size_of_ignored"
  echo "  everything: $total_size"
else
  if [ "$csv_hdr" -eq "1" ]; then
      echo "directory_name,dot_git_folder_size,checkout_size,ignored_size,everything_size"
  fi
  echo "\"$directory\",$size_of_dot_git_folder,$size_of_checkout,$size_of_ignored,$total_size"
fi
