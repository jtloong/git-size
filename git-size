#!/bin/bash

usage(){
  echo "Usage:"
  echo "  git size --csv --csv-header --kilobytes DIRNAME"
  echo "  DIRNAME is optional - defaults to current directory"
  echo "  --csv or -c: output as csv format"
  echo "  --csv-header or -H: header row for CSV output"
  echo "  --kilobytes or -k: kilobyte blocks instead of human units (always for CSV)"
  echo ""
  echo "  Want recursive? How about:"
  echo "  find . -type d -name .git -exec git size --csv {} \;"
  echo "  (don't worry about a /.git suffix, this will work as you'd wish)"
  exit 1
}

directory=$(pwd)
csv_format="0"
fmt="-h"
csv_hdr="0"
leftOver=""
until [ -z $1 ]
    do
    if [ "$1" == "--csv" ] || [ "$1" == "-c" ]; then
        csv_format="1"
        fmt="-k"
        shift
    elif [ "$1" == "--kilobytes" ] || [ "$1" == "-k" ]; then
      fmt="-k"
      shift
    elif [ "$1" == "--csv-headers" ] || [ "$1" == "-H" ]; then
      csv_hdr="1"
      shift
    elif [ "$1" == "--help" ] || [ "$1" == "-h" ]; then
        usage
    else
        directory=$(echo "$1" | sed 's/\.git$//')
        directory=$(realpath "$directory")
        shift
        if [ "$#" -gt "0" ]; then
            leftOver="${leftOver} $@"
            break
        fi
    fi
done

if [ ! -z "${leftOver// }" ]; then
    echo "Unrecognized params/options: $leftOver"
    usage
fi

cd "$directory"

# Can only go ahead if a git repo
not_a_git_repo=$(git status . 2>&1 | grep "Not a git repository" | wc -l)
if [ "$not_a_git_repo" -gt "0" ]; then
  echo "Directory $directory isn't a Git repository/clone, can't run 'git size' there"
  exit 1
fi

total_size=$(du $fmt -d0 . | cut -f 1)

size_of_ignored="0"
if [ -f .gitignore ]; then
  # the perl one-liner removes files from stdin that don't exist. Should be a unix command 'pipefilesexist'
  find . -type f -print0 | git check-ignore -z --stdin | perl -ne 'chomp(); if (-e $_) {print "$_\n"}' > .gitsize_ignored
  if [ -s .gitsize_ignored ]; then
    size_of_ignored=$(cat .gitsize_ignored | sed 's/.*/"&"/' | xargs -s 6000000 du -d0 -c $fmt | tail -1 | cut -f 1)
  fi
  rm .gitsize_ignored
fi

git ls-files | perl -ne 'chomp(); if (-e $_) {print "$_\n"}' > .gitsize_checkout
size_of_checkout=$(cat .gitsize_checkout | sed 's/.*/"&"/' | xargs -s 6000000 du -d0 -c $fmt | tail -1 | cut -f 1)
rm .gitsize_checkout

size_of_dot_git_folder=$(du $fmt -d0 .git | tail -1 | cut -f 1)

if [ "$csv_format" -eq "0" ]; then
  if [ $fmt == "-k" ]; then
    format=" (KB)"
  else
    format=""
  fi
  echo "$directory: git size${format}:"
  echo "  .git folder: $size_of_dot_git_folder"
  echo "  checkout: $size_of_checkout"
  echo "  ignored: $size_of_ignored"
  echo "  everything: $total_size"
else
  if [ "$csv_hdr" -eq "1" ]; then
      echo "directory_name, dot_git_folder_size, checkout_size, ignored_size, everything_size"
  fi
  echo "\"$directory\", $size_of_dot_git_folder, $size_of_checkout, $size_of_ignored, $total_size"
fi
